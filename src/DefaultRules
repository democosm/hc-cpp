# vim: ft=make

# Target - Default targets depending on package type
ifeq ($(PKGTYPE), lib)
  default: $(LIBDSTDIR)/lib$(PKGNAME).a
else
  ifeq ($(PKGTYPE), app)
    default: $(addprefix l-, $(LINKLIBS))
	@$(MAKE) $(BINDSTDIR)/$(PKGNAME)
  else
    ifeq ($(PKGTYPE), test)
      default: $(addprefix l-, $(LINKLIBS))
	@$(MAKE) $(BINDSTDIR)/test_$(PKGNAME)
     else
      default::
	@echo "Unrecognized package type (must be 'lib', 'app' or 'test')"
    endif
  endif
endif

# Target - Show make system variables
vars:
	@echo "PROJBASEDIR = $(PROJBASEDIR)"
	@echo "TGTPROC = $(TGTPROC)"
	@echo "TGTOS = $(TGTOS)"
	@echo "TGTBUILD = $(TGTBUILD)"
	@echo "PKGNAME = $(PKGNAME)"
	@echo "PKGTYPE = $(PKGTYPE)"
	@echo "TGTDIR = $(TGTDIR)"
	@echo "DEPDSTDIR = $(DEPDSTDIR)"
	@echo "OBJDSTDIR = $(OBJDSTDIR)"
	@echo "LIBDSTDIR = $(LIBDSTDIR)"
	@echo "BINDSTDIR = $(BINDSTDIR)"
	@echo "SRCLIST = $(SRCLIST)"
	@echo "DEPLIST = $(DEPLIST)"
	@echo "OBJLIST = $(OBJLIST)"
	@echo "LIBLIST = $(LIBLIST)"
	@echo "STDLIBLIST = $(STDLIBLIST)"
	@echo "AS = $(AS)"
	@echo "CC = $(CC)"
	@echo "CXX = $(CXX)"
	@echo "AR = $(AR)"
	@echo "LD = $(LD)"
	@echo "ASFLAGS = $(ASFLAGS)"
	@echo "CFLAGS = $(CFLAGS)"
	@echo "CXXFLAGS = $(CXXFLAGS)"
	@echo "ARFLAGS = $(ARFLAGS)"
	@echo "LDFLAGS = $(LDFLAGS)"

# Target - Remove intermediate files
clean::
	@rm -f $(OBJLIST)
	@rm -f $(DEPLIST)
	@echo ""

# Target - Application executable
$(BINDSTDIR)/$(PKGNAME): $(OBJLIST)
	@mkdir -p $(BINDSTDIR)
# Clang (g++ on OSX) doesn't support start-group linker option
ifeq ($(UNAME_S),Darwin)
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJLIST) $(LIBLIST) $(STDLIBLIST) -o $@
else
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -Wl,--start-group $(OBJLIST) $(LIBLIST) -Wl,--end-group $(STDLIBLIST) -o $@
endif
	@echo "APP: $@"

# Target - Test executable
$(BINDSTDIR)/test_$(PKGNAME): $(OBJLIST)
	@mkdir -p $(BINDSTDIR)
# Clang (g++ on OSX) doesn't support start-group linker option
ifeq ($(UNAME_S),Darwin)
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJLIST) $(LIBLIST) $(STDLIBLIST) -o $@
else
	@$(CXX) $(CXXFLAGS) $(LDFLAGS) -Wl,--start-group $(OBJLIST) $(LIBLIST) -Wl,--end-group $(STDLIBLIST) -o $@
endif
	@echo "TST: $@"

# Target - Library archive
$(LIBDSTDIR)/lib$(PKGNAME).a: $(OBJLIST)
	@mkdir -p $(LIBDSTDIR)
	@ar -r -c -s $@ $^
	@echo "LIB: $@"

# Rule - Generate object files from assembly source
$(OBJDSTDIR)/%.s.o: %.s
	@mkdir -p $(OBJDSTDIR)
	@$(AS) $(ASFLAGS) $< -o $@
	@echo "OBJ: $@"

# Rule - Generate object files from C source
$(OBJDSTDIR)/%.c.o: %.c
	@mkdir -p $(OBJDSTDIR)
	@$(CC) $(CFLAGS) -c $< -o $@
	@echo "OBJ: $@"

# Rule - Generate object files from C++ source
$(OBJDSTDIR)/%.cc.o: %.cc
	@mkdir -p $(OBJDSTDIR)
	@$(CXX) $(CXXFLAGS) -c $< -o $@
	@echo "OBJ: $@"

# Rule - Generate dependencies files from C source
$(DEPDSTDIR)/%.c.dep: %.c
	@mkdir -p $(DEPDSTDIR)
	@touch $@
	@$(CC) -M $(CFLAGS) $< | sed -e 's;^\([^ ]\);$$(OBJDSTDIR)/\1;' | sed -e 's;\.o:;\.c\.o:;' > $@
	@echo "DEP: $@"

# Rule - Generate dependencies files from C++ source
$(DEPDSTDIR)/%.cc.dep: %.cc
	@mkdir -p $(DEPDSTDIR)
	@touch $@
	@$(CC) -M $(CFLAGS) $< | sed -e 's;^\([^ ]\);$$(OBJDSTDIR)/\1;' | sed -e 's;\.o:;\.cc\.o:;' > $@
	@echo "DEP: $@"

# Rule - Causes per application libraries to be built (see default targets)
l-%:
	@cd $(subst l-,$(PROJBASEDIR)/src/lib/,$@) && $(MAKE)

# Include the dependencies files if appropriate
ifeq (,$(findstring clean,$(MAKECMDGOALS)))
  ifeq (,$(findstring vars,$(MAKECMDGOALS)))
    -include $(DEPLIST)
  endif
endif
